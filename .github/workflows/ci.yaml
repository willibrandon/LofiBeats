name: CI

on:
  push:
    branches: [ main ]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # Matches semantic versioning tags like v1.0.0
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        configuration: [Debug, Release]
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for GitVersion
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
        
    - name: Install dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration ${{ matrix.configuration }} --no-restore
      
    - name: Test
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          dotnet test --configuration ${{ matrix.configuration }} --no-build --verbosity normal
        else
          dotnet test --configuration ${{ matrix.configuration }} --no-build --verbosity normal --filter "Category!=Platform_Specific"
        fi
      shell: bash
      
    # Package CLI tool (only on Release configuration)
    - name: Package CLI Tool
      if: matrix.configuration == 'Release'
      run: dotnet pack src/LofiBeats.Cli/LofiBeats.Cli.csproj --configuration Release --no-build --output nupkg
      
    # Upload artifacts
    - name: Upload NuGet Package
      if: matrix.configuration == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package-${{ matrix.os }}
        path: nupkg/*.nupkg
        
    # Upload test results (if any test runners generate them)
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.configuration }}
        path: |
          **/TestResults/*.trx
          **/TestResults/*.xml

  publish:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
        
    # Extract version from tag
    - name: Get Version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: nuget-package-*
        path: packages
        merge-multiple: true
        
    - name: Setup GitHub Packages
      run: dotnet nuget add source --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
      
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        files: packages/*.nupkg
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Publish NuGet Package
      run: |
        for package in packages/*.nupkg; do
          dotnet nuget push "$package" --source "github" --api-key ${{ secrets.GITHUB_TOKEN }}
        done
        
    - name: Publish to NuGet
      run: |
        for package in packages/*.nupkg; do
          dotnet nuget push "$package" --source "https://api.nuget.org/v3/index.json" --api-key ${{ secrets.NUGET_API_KEY }}
        done
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }} 