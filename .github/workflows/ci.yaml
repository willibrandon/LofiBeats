name: CI

on:
  push:
    branches: [ main ]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # Matches semantic versioning tags like v1.0.0
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  packages: read

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  windows:
    name: Windows Build
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for GitVersion
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Install dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration ${{ matrix.configuration }} --no-restore
      
    - name: Test with Coverage
      run: dotnet test --configuration ${{ matrix.configuration }} --no-build --verbosity normal --results-directory "${{ github.workspace }}/TestResults" --logger "trx;LogFileName=test_results.trx" --logger "html;LogFileName=test_results.html" --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      
    - name: Prepare Coverage Report
      if: matrix.configuration == 'Release'
      shell: pwsh
      run: |
        Write-Host "Searching for coverage files..."
        Get-ChildItem -Path "${{ github.workspace }}/TestResults" -Recurse | ForEach-Object { Write-Host $_.FullName }
        
        $coverageFile = Get-ChildItem -Path "${{ github.workspace }}/TestResults" -Recurse -Filter "coverage.opencover.xml" | Select-Object -First 1
        if ($null -eq $coverageFile) {
            Write-Error "No coverage file found!"
            exit 1
        }
        Write-Host "Coverage file found at: $($coverageFile.FullName)"
        Write-Host "Verifying file exists and is readable..."
        if (Test-Path $coverageFile.FullName) {
            Write-Host "File exists and is readable"
            echo "COVERAGE_FILE=$($coverageFile.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append
        } else {
            Write-Error "Coverage file not accessible!"
            exit 1
        }
      
    - name: Upload Coverage to Codecov
      if: matrix.configuration == 'Release'
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ${{ env.COVERAGE_FILE }}
        flags: windows
        fail_ci_if_error: true
      
    - name: Package CLI Tool
      if: matrix.configuration == 'Release'
      run: dotnet pack src/LofiBeats.Cli/LofiBeats.Cli.csproj --configuration Release --output nupkg
      
    - name: Upload NuGet Package
      if: matrix.configuration == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package-windows-${{ matrix.configuration }}
        path: nupkg/*.nupkg
        
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-windows-${{ matrix.configuration }}
        path: |
          **/TestResults/*.trx
          **/TestResults/*.xml

  linux:
    name: Linux Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    container:
      image: ghcr.io/willibrandon/lofibeats/audiotest:latest
      credentials:
         username: ${{ github.actor }}
         password: ${{ secrets.CONTAINER_REGISTRY_PAT }}
      options: --init
    strategy:
      matrix:
        configuration: [Debug, Release]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Audio
      run: /entrypoint.sh echo "Audio setup complete"
      
    - name: Install dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration ${{ matrix.configuration }} --no-restore
      
    - name: Test with Coverage
      run: dotnet test --configuration ${{ matrix.configuration }} --no-build --verbosity normal --filter "Category!=Platform_Specific" --results-directory "${{ github.workspace }}/TestResults" --logger "trx;LogFileName=test_results.trx" --logger "html;LogFileName=test_results.html" --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      
    - name: Install gpg
      if: matrix.configuration == 'Release'
      run: |
        apt-get update
        apt-get install -y gpg
      
    - name: Prepare Coverage Report
      if: matrix.configuration == 'Release'
      run: |
        echo "Searching for coverage files..."
        find "${{ github.workspace }}/TestResults" -type f -ls
        
        # Create a directory for the consolidated report
        mkdir -p coverage
        
        # Find and copy the coverage file
        coverage_file=$(find "${{ github.workspace }}/TestResults" -name "coverage.opencover.xml" | head -n 1)
        if [ -z "$coverage_file" ]; then
            echo "Error: No coverage file found!"
            exit 1
        fi
        
        echo "Coverage file found at: $coverage_file"
        echo "Copying to known location..."
        cp "$coverage_file" coverage/coverage.opencover.xml
        
        if [ -f "coverage/coverage.opencover.xml" ] && [ -r "coverage/coverage.opencover.xml" ]; then
            echo "Coverage file successfully copied and is readable"
            echo "COVERAGE_FILE=${{ github.workspace }}/coverage/coverage.opencover.xml" >> $GITHUB_ENV
            ls -la coverage/
        else
            echo "Error: Coverage file not accessible after copy!"
            exit 1
        fi
      
    - name: Upload Coverage to Codecov
      if: matrix.configuration == 'Release'
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: coverage
        flags: linux
        fail_ci_if_error: true
      
    - name: Package CLI Tool
      if: matrix.configuration == 'Release'
      run: dotnet pack src/LofiBeats.Cli/LofiBeats.Cli.csproj --configuration Release --output nupkg
      
    - name: Upload NuGet Package
      if: matrix.configuration == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package-linux-${{ matrix.configuration }}
        path: nupkg/*.nupkg
        
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-linux-${{ matrix.configuration }}
        path: |
          ${{ github.workspace }}/TestResults/test_results.trx
          ${{ github.workspace }}/TestResults/test_results.html

  # TODO: macOS support
  # macos:
  #   name: macOS Build
  #   runs-on: macos-latest
  #   strategy:
  #     matrix:
  #       configuration: [Debug, Release]
  #   steps:
  #   # TODO: Implement macOS-specific audio setup
  #   # Considerations:
  #   # 1. CoreAudio vs PulseAudio approach
  #   # 2. OpenAL configuration
  #   # 3. Test filtering for unsupported features

  publish:
    needs: [windows, linux] # Will add macos here when implemented
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
        
    # Extract version from tag
    - name: Get Version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: nuget-package-*
        path: packages
        merge-multiple: true
        
    - name: Install zip tools
      run: |
        sudo apt-get update
        sudo apt-get install -y zip unzip file

    - name: Verify Package Contents
      run: |
        echo "=== Package location and permissions ==="
        ls -la packages/
        
        echo -e "\n=== Package file type ==="
        file packages/*.nupkg
        
        echo -e "\n=== Package contents listing ==="
        unzip -l packages/*.nupkg || echo "Failed to list contents"
        
        echo -e "\n=== Package validation ==="
        dotnet nuget verify packages/*.nupkg || echo "Package verification failed"
        
        echo -e "\n=== NuGet package details ==="
        dotnet nuget list source
        nuget locals all -list

    - name: Setup GitHub Packages
      run: |
        echo "=== Configuring NuGet source ==="
        dotnet nuget remove source github || true
        dotnet nuget add source --username ${{ github.actor }} \
          --password ${{ secrets.GITHUB_TOKEN }} \
          --store-password-in-clear-text \
          --name github \
          "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
        
        echo -e "\n=== Verifying NuGet sources ==="
        dotnet nuget list source
        
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        files: packages/*.nupkg
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Publish NuGet Package
      run: |
        for package in packages/*.nupkg; do
          dotnet nuget push "$package" --source "github" --api-key ${{ secrets.GITHUB_TOKEN }}
        done

  verify-tool:
    needs: publish
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
        
    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        pattern: nuget-package-*
        path: packages
        merge-multiple: true
        
    - name: Verify Tool Installation
      run: |
        dotnet tool install --global --add-source ./packages LofiBeats.Cli
        lofi --version
        # Quick smoke test of core functionality
        lofi play --style basic
        Start-Sleep -Seconds 5
        lofi stop
        dotnet tool uninstall -g LofiBeats.Cli

  publish-nuget:
    needs: verify-tool
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        pattern: nuget-package-*
        path: packages
        merge-multiple: true
        
    - name: Publish to NuGet
      run: |
        for package in packages/*.nupkg; do
          dotnet nuget push "$package" --source "https://api.nuget.org/v3/index.json" --api-key ${{ secrets.NUGET_API_KEY }}
        done
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }} 