name: CI

on:
  push:
    branches: [ main ]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # Matches semantic versioning tags like v1.0.0
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        configuration: [Debug, Release]
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for GitVersion
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    # Install OpenAL and PulseAudio dependencies on Linux
    - name: Install Linux Audio Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          libopenal1 \
          libopenal-data \
          alsa-utils \
          pulseaudio \
          pulseaudio-utils \
          pavucontrol \
          libasound2-plugins \
          alsa-oss \
          openal-tools
        sudo ldconfig

        # Create required directories with correct permissions
        sudo mkdir -p /var/run/pulse
        sudo mkdir -p /var/lib/pulse
        sudo chmod -R 777 /var/run/pulse
        sudo chmod -R 777 /var/lib/pulse
        
        # Configure PulseAudio for system mode
        sudo mkdir -p /etc/pulse
        sudo bash -c 'echo "load-module module-native-protocol-unix auth-anonymous=1
        load-module module-native-protocol-tcp auth-anonymous=1
        load-module module-null-sink sink_name=DummyOutput channels=2 channel_map=front-left,front-right rate=44100 format=float32le
        load-module module-always-sink
        set-default-sink DummyOutput" > /etc/pulse/system.pa'
        
        sudo bash -c 'echo "daemonize = no
        system-instance = yes
        exit-idle-time = -1
        allow-module-loading = yes
        allow-exit = yes
        enable-shm = yes
        enable-memfd = yes
        flat-volumes = no
        default-sample-format = float32le
        default-sample-rate = 44100
        default-sample-channels = 2
        default-channel-map = front-left,front-right" > /etc/pulse/daemon.conf'
        
        # Configure OpenAL
        sudo mkdir -p /etc/openal
        sudo bash -c 'echo "drivers=pulse
        [pulse]
        allow-moves=true
        default=true
        channels=stereo
        [general]
        channels=stereo
        frequency=44100
        samples=4096
        debug-level=4
        disable-denormals=true
        cf_level=2
        rt-prio=0
        period_size=1024
        periods=4" > /etc/openal/alsoft.conf'
        
        # Configure ALSA
        sudo bash -c 'echo "pcm.!default {
            type pulse
        }
        
        ctl.!default {
            type pulse
        }" > /etc/asound.conf'

        # Create PulseAudio socket directory
        sudo mkdir -p /run/pulse
        sudo chmod -R 777 /run/pulse
        
    # Start PulseAudio in system mode on Linux
    - name: Start PulseAudio
      if: runner.os == 'Linux'
      run: |
        # Kill any existing PulseAudio processes
        sudo killall pulseaudio || true
        
        # Start PulseAudio with sudo
        sudo -E pulseaudio --system --disallow-exit --exit-idle-time=-1 --log-level=4 &
        sleep 5  # Give more time to start up
        
        # Verify PulseAudio is running
        ps aux | grep pulse
        
        # Show audio debug info
        sudo -E pactl info || true
        sudo -E pactl list sinks || true
        sudo -E pactl list short || true
        sudo -E aplay -l || true
        sudo -E cat /proc/asound/cards || true
        sudo -E openal-info || true
        
    - name: Install dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration ${{ matrix.configuration }} --no-restore
      
    - name: Test
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          dotnet test --configuration ${{ matrix.configuration }} --no-build --verbosity normal
        else
          # Set OpenAL environment variables
          export ALSOFT_DRIVERS=pulse
          export ALSOFT_LOGLEVEL=2
          export ALSOFT_LOGFILE=/tmp/openal.log
          dotnet test --configuration ${{ matrix.configuration }} --no-build --verbosity normal --filter "Category!=Platform_Specific"
        fi
      shell: bash
      
    # Package CLI tool (only on Release configuration)
    - name: Package CLI Tool
      if: matrix.configuration == 'Release'
      run: dotnet pack src/LofiBeats.Cli/LofiBeats.Cli.csproj --configuration Release --no-build --output nupkg
      
    # Upload artifacts
    - name: Upload NuGet Package
      if: matrix.configuration == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package-${{ matrix.os }}
        path: nupkg/*.nupkg
        
    # Upload test results (if any test runners generate them)
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.configuration }}
        path: |
          **/TestResults/*.trx
          **/TestResults/*.xml

  publish:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
        
    # Extract version from tag
    - name: Get Version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: nuget-package-*
        path: packages
        merge-multiple: true
        
    - name: Setup GitHub Packages
      run: dotnet nuget add source --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
      
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        files: packages/*.nupkg
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Publish NuGet Package
      run: |
        for package in packages/*.nupkg; do
          dotnet nuget push "$package" --source "github" --api-key ${{ secrets.GITHUB_TOKEN }}
        done
        
    - name: Publish to NuGet
      run: |
        for package in packages/*.nupkg; do
          dotnet nuget push "$package" --source "https://api.nuget.org/v3/index.json" --api-key ${{ secrets.NUGET_API_KEY }}
        done
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }} 